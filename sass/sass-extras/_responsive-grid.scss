// Calculate the fluid gutters in percentages
// -----------------------------------------------------------------
@function gutter-width() {
    @return 100% / ($max-width / $gutter);
}


// Calculate the grid widths
// -----------------------------------------------------------------
@mixin col-width($i, $value: true) {

    // The standard width is optional
    @if $value == true {
        width: 100% / ($max-width / (((($max-width - (($nr-of-columns - 1) * $gutter)) / $nr-of-columns) * $i) + (($i - 1) * $gutter)));
    }
    
    @if $i == $nr-of-columns {
        width: #{100% / ($max-width / (((($max-width / $nr-of-columns) * $i))))};
        margin-right: 0;    
    }

}


// Every column should have a row as it's parent
// -----------------------------------------------------------------
.row {
    width: 100%;
    float: left;
    
    > .col {
        width: 100%;
        float: left;

        @include min-screen($lap) {
            margin-right: gutter-width();
        }

        &:last-child {

            @include min-screen($lap) {
                margin-right: 0;
            }
        }
    }

    // All screen widths
    // -----------------------------------------------------------------
    @for $i from 1 through $nr-of-columns {

        @include min-screen($lap) {

            > .col-#{$i} {
                @include col-width($i, true);
            }
        }
    }


    // Palm to lap
    // Non-flexbox browsers will use the standard col widths for this small screen to prevent columns becoming too small
    // You can remove this when unused to minimize the css
    // -----------------------------------------------------------------
    @for $i from 1 through $nr-of-columns {

        > .col-palm-#{$i} {

            @include screen($palm, $lap) {
                @include col-width($i, true);
            }
        }
    }


    // Lap to desk
    // You can remove this when unused to minimize the css
    // -----------------------------------------------------------------
    @for $i from 1 through $nr-of-columns {

        > .col-lap-#{$i} {

            @include screen($lap, $desk) {
                @include col-width($i, true);
            }
        }
    }


    // Desk to wall
    // You can remove this when unused to minimize the css
    // -----------------------------------------------------------------
    @for $i from 1 through $nr-of-columns {

        > .col-desk-#{$i} {

            @include screen($desk, $wall) {
                @include col-width($i, true);
            }
        }
    }


    // Wall to cinema
    // You can remove this when unused to minimize the css
    // -----------------------------------------------------------------
    @for $i from 1 through $nr-of-columns {

        .col-wall-#{$i} {

            @include screen($wall, $cinema) {
                @include col-width($i, true);
            }
        }
    }


    // Offset
    // You can remove this when unused to minimize the css
    // -----------------------------------------------------------------
    @for $i from 1 through $nr-of-columns {

        > .col-push-#{$i} {

            @include min-screen($lap) {
                margin-left: 100% / ($max-width / (((($max-width - (($nr-of-columns + 1) * $gutter)) / $nr-of-columns) * $i) + (($i + 1) * $gutter)));
            }
        }
    }
}


// Extra or no margins
// -----------------------------------------------------------------
.no-margin {
    margin-right: 0;
}

.plus-margin {
    margin-right: gutter-width();
}
