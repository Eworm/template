// Pixels to em
// -----------------------------------------------------------------
@function calc-em($target-px, $context: $size) {
    @return ($target-px / $context) * 1em;
}


// SVG background with png fallback
// -----------------------------------------------------------------
@mixin svgbg($image) {
    background-repeat: no-repeat;
    background-image: url($image + '.svg');
    
    .no-svg & {
        // On svg capable browsers, use an svg
        background-image: url($image + '.png');
    }    
}


// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
// -----------------------------------------------------------------
$baseline-px: $base-size;

@mixin rem($property, $px-values) {

    // Convert the baseline into rems
    $baseline-rem: $baseline-px / 1rem;
    
    // Print the first line in pixel values
    #{$property}: $px-values;
    
    // If there is only one (numeric) value, return the property/value line for it.
    
    @if type-of($px-values) == 'number' {
    
        #{$property}: $px-values / $baseline-rem; }
    
    @else {

        // Create an empty list that we can dump values into
        $rem-values: unquote('');

        @each $value in $px-values {

            // If the value is zero, return 0
            @if $value == 0 {

                $rem-values: append($rem-values, $value); }

            @else {

                $rem-values: append($rem-values, $value / $baseline-rem); } }

        // Return the property and its list of converted values
        #{$property}: $rem-values; } }


// Remove units
// -----------------------------------------------------------------
@function rem-units($number) {
    @return $number / ($number * 0 + 1);
}